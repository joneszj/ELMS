@model ELMS.UI.Web.Models.EducationProfileIndex_EducationProfile
<div id="@Model.partialFormName-FormIdContainer">
    @using (Ajax.BeginForm("EducationProfileUpdate", "EducationProfile", null, new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure", OnBegin = "OnBegin", OnComplete = "OnComplete", InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.partialFormName + "-FormIdContainer" }, new { @id = Model.partialFormName + "FormId" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @*<h4>EducationProfileIndex_EducationProfile</h4>*@
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.CurrentEducation, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.CurrentEducation,
                         Model.EducationLevels.Select(x => new SelectListItem
                         {
                             Text = x.Text,
                             Value = x.Id.ToString(),
                             Selected = Model.CurrentEducation == x.Id
                         }), "Select Current Education Level", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CurrentEducation, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group" data-form-group="HS" @{if (!Model.HighSchoolGPA.HasValue) { <text> style="display:none" </text> } }>
                <hr />
                @Html.LabelFor(model => model.HighSchoolGPA, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.HighSchoolGPA, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HighSchoolGPA, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" data-form-group="HS" @{if (!Model.HighSchoolGraduationYear.HasValue) { <text> style="display:none" </text> } }>
                @Html.LabelFor(model => model.HighSchoolGraduationYear, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.HighSchoolGraduationYear,
                Model.GraduationYears.Select(x => new SelectListItem
                {
                    Text = x.Text,
                    Value = x.Id.ToString(),
                    Selected = Model.HighSchoolGraduationYear == x.Id
                }), "Select Graduation Year", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.HighSchoolGraduationYear, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" data-form-group="GED" @{if (!Model.GED) { <text> style="display:none" </text> } }>
                @Html.LabelFor(model => model.GED, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.CheckBoxFor(model => model.GED, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.GED, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group" data-form-group="HS" @{if (string.IsNullOrEmpty(Model.HighSchoolName)) { <text> style="display:none" </text> } }>
                <hr />
                @Html.LabelFor(model => model.HighSchoolName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.HighSchoolName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HighSchoolName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" data-form-group="HS" @{if (!Model.CountyId.HasValue) { <text> style="display:none" </text> } }>
                @Html.LabelFor(model => model.CountyId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.CountyId,
                Model.Counties.Select(x => new SelectListItem
                {
                    Text = x.Text,
                    Value = x.Id.ToString(),
                    Selected = Model.CountyId == x.Id
                }), "Select County", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CountyId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group" data-form-group="PostSecondary" @{if (!Model.SATScore.HasValue) { <text> style="display:none" </text> } }>
                <hr />
                @Html.LabelFor(model => model.SATScore, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SATScore, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SATScore, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" data-form-group="PostSecondary" @{if (!Model.ACTScore.HasValue) { <text> style="display:none" </text> } }>
                @Html.LabelFor(model => model.ACTScore, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ACTScore, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ACTScore, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group" data-form-group="PostSecondary" @{if (!Model.MilitaryExperience) { <text> style="display:none" </text> } }>
                <hr />
                @Html.LabelFor(model => model.MilitaryExperience, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.CheckBoxFor(model => model.MilitaryExperience, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MilitaryExperience, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" disabled />
                </div>
            </div>
        </div>
    }
    <script>
        var CountyIdElement = $('#CountyId');
        var CuurentEducationIdElement = $('#CurrentEducation');
        var HS = $('div[data-form-group="HS"]');
        var GED = $('div[data-form-group="GED"]');
        var PS = $('div[data-form-group="PostSecondary"]');
        var HSGradYears = $('#HighSchoolGraduationYear');
        $(document).ready(function () {
            var form = '@Model.partialFormName';
            var state = false;
            $.validator.unobtrusive.parse("#" + form + "FormId");
            updateFormValidation(form);
            CuurentEducationIdElement.select2();
            HSGradYears.select2();
            CountyIdElement.select2({
                ajax: {
                    url: "/EducationProfile/GetFilteredCounties",
                    dataType: 'json',
                    quietMillis: 150,
                    data: function (params) {
                        return {
                            filter: params.term,
                        };
                    },
                    processResults: function (data, params) {
                        params.page = params.page || 1;
                        return {
                            results: $.map(data, function (item) {
                                return {
                                    id: item.Id,
                                    text: item.Text,
                                }
                            })
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) { return markup; },
                minimumInputLength: 0
            });
            CuurentEducationIdElement.change(function () {
                updateUIEducationProfile();
            })
            GED.change(function () {
                checkGED();
            })
            select2WidthHelper(CountyIdElement);
            select2WidthHelper(HSGradYears);
            updateUIEducationProfile();
        });
        function checkGED() {
            if (GED.find('input[type="checkbox"]').is(":checked")) {
                HS.slideUp();
                return true;
            }
            else {
                HS.slideDown();
                return false;
            }
        }
        function updateUIEducationProfile() {
            var value = CuurentEducationIdElement.val();
            if (value == 1 || value == 2) {
                //still in, or has not completed HS
                HS.slideUp();
                GED.slideUp();
                PS.slideUp();
            }
            else if (value == 3) {
                //Completed HS
                HS.slideDown();
                GED.slideUp();
                PS.slideDown();
                GED.find('input[type="checkbox"]').prop("checked", false);
            }
            else if (value == 4) {
                //show post secondary GED questions
                HS.slideUp();
                GED.slideUp();
                PS.slideDown();
                GED.find('input[type="checkbox"]').prop("checked", true);
            }
            else {
                //show post secondary HS or GED questions
                GED.find('input[type="checkbox"]').prop("checked", false);
                GED.slideDown();
                HS.slideDown();
                PS.slideDown();
            }
        }
    </script>
</div>